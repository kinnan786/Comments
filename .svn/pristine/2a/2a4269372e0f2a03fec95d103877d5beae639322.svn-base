using System;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace SMOAPP.Data.Filter
{
    public static class SortHelper
    {
        private static readonly MethodInfo GroupByMethod =
            typeof (Queryable).GetMethods()
                .Where(method => method.Name == "GroupBy")
                .Where(method => method.GetParameters().Length == 2)
                .Single();

        private static readonly MethodInfo OrderByMethod =
            typeof (Queryable).GetMethods()
                .Where(method => method.Name == "OrderBy")
                .Where(method => method.GetParameters().Length == 2)
                .Single();

        private static readonly MethodInfo OrderByDescendingMethod =
            typeof (Queryable).GetMethods()
                .Where(method => method.Name == "OrderByDescending")
                .Where(method => method.GetParameters().Length == 2)
                .Single();

        public static IQueryable<T> OrderByProperty<T>
            (this IQueryable<T> source, string propertyName) where T : class
        {
            if (string.IsNullOrEmpty(propertyName))
                return source;

            var parameter = Expression.Parameter(typeof (T), propertyName);

            Expression orderByProperty = Expression.Property(parameter, propertyName);

            var lambda = Expression.Lambda(orderByProperty, parameter);
            Console.WriteLine(lambda);
            var genericMethod = OrderByMethod.MakeGenericMethod
                (typeof (T), orderByProperty.Type);
            var ret = genericMethod.Invoke(null, new object[] {source, lambda});
            return (IQueryable<T>) ret;
        }

        public static IQueryable<T> OrderByDescProperty<T>
            (this IQueryable<T> source, string propertyName) where T : class
        {
            if (string.IsNullOrEmpty(propertyName))
                return source;
            var parameter = Expression.Parameter(typeof (T), propertyName);

            Expression orderByProperty = Expression.Property(parameter, propertyName);

            var lambda = Expression.Lambda(orderByProperty, parameter);
            Console.WriteLine(lambda);
            var genericMethod = OrderByDescendingMethod.MakeGenericMethod
                (typeof (T), orderByProperty.Type);
            var ret = genericMethod.Invoke(null, new object[] {source, lambda});
            return (IQueryable<T>) ret;
        }

        public static IQueryable<T> GroupByProperty<T>
            (this IQueryable<T> source, string propertyName) where T : class
        {
            if (string.IsNullOrEmpty(propertyName))
                return source;
            var parameter = Expression.Parameter(typeof (T), propertyName);

            Expression groupByProperty = Expression.Property(parameter, propertyName);

            var lambda = Expression.Lambda(groupByProperty, parameter);
            Console.WriteLine(lambda);
            var genericMethod = GroupByMethod.MakeGenericMethod
                (typeof (T), groupByProperty.Type);
            var ret = genericMethod.Invoke(null, new object[] {source, lambda});
            return (IQueryable<T>) ret;
        }
    }
}